model:
  name: "smollm:360m"
  display_name: "SmolLM 360M - Balanced Performance"
  description: "Well-balanced model offering good performance with reasonable resource usage"
  parameters: "360M"
  size: "229MB"
  context_window: 4096
  max_tokens: 1536
  
  # Generation settings
  default_temperature: 0.7
  default_top_p: 0.9
  default_top_k: 40
  
  # Performance characteristics
  strengths:
    - "Balanced speed and capability (~500ms)"
    - "Good general knowledge"
    - "Decent reasoning abilities"
    - "Moderate memory usage (2GB RAM)"
    - "Versatile for most tasks"
  
  weaknesses:
    - "Not specialized for any domain"
    - "Limited advanced reasoning"
    - "Moderate context length"
    - "May struggle with very complex tasks"
  
  # Optimal use cases
  use_cases:
    - "General conversation"
    - "Content creation"
    - "Code explanation"
    - "Problem solving"
    - "Research assistance"
    - "Document analysis"
    - "Creative writing"
    - "Educational content"

prompts:
  system: |
    You are a knowledgeable AI assistant with balanced capabilities.
    Provide thoughtful, well-structured responses that are informative yet accessible.
    You can handle a wide range of tasks from simple questions to moderate complexity problems.
    When faced with very complex tasks, break them down into manageable parts.
  
  optimization_rules:
    - "Provide balanced detail - not too brief, not too verbose"
    - "Use clear structure with headings or bullet points when helpful"
    - "Explain reasoning when appropriate"
    - "Offer examples to illustrate concepts"
    - "Suggest next steps or related topics"
  
  max_prompt_length: 400
  recommended_prompt_style: "structured_and_informative"

performance:
  timeout: 30  # seconds
  retry_attempts: 3
  cache_enabled: true
  cache_ttl: 600  # 10 minutes
  
  # Resource limits
  max_concurrent_requests: 6
  memory_limit: "2GB"
  
  # Quality settings
  min_response_length: 20
  max_response_length: 1200
  
agent_config:
  # Which agent roles this model is suitable for
  suitable_roles:
    - "general_assistant"
    - "content_creator"
    - "problem_solver"
    - "research_helper"
    - "code_assistant"
    - "writing_assistant"
  
  # Agent-specific settings
  planning_capability: "good"
  reasoning_capability: "moderate"
  creativity_level: "good"
  factual_accuracy: "good"
  
  # Task routing
  auto_route_to_larger_model:
    - "expert_level_analysis"
    - "complex_multi_step_reasoning"
    - "specialized_domain_knowledge"
    - "very_long_context_tasks"
  
  auto_route_to_smaller_model:
    - "simple_yes_no_questions"
    - "basic_definitions"
    - "quick_calculations"

monitoring:
  # Performance metrics to track
  track_metrics:
    - "response_time"
    - "token_throughput"
    - "memory_usage"
    - "success_rate"
    - "user_satisfaction"
    - "task_completion_rate"
  
  # Alerts
  alert_thresholds:
    response_time_ms: 1000
    memory_usage_mb: 2500
    error_rate_percent: 3

examples:
  # Example prompts that work well with this model
  good_prompts:
    - "Explain machine learning concepts for beginners"
    - "Write a Python function to sort a list with explanation"
    - "Create a marketing plan outline for a small business"
    - "Analyze the pros and cons of remote work"
    - "Help me debug this code snippet"
    - "Write a short story about time travel"
  
  # Prompts that should be routed to larger models
  route_to_larger:
    - "Provide expert-level analysis of quantum field theory"
    - "Create a complete enterprise software architecture"
    - "Analyze complex financial derivatives trading strategies"
    - "Write a comprehensive literature review on neuroscience"
  
  # Prompts that should be routed to smaller models
  route_to_smaller:
    - "What is 2+2?"
    - "Define 'algorithm'"
    - "Is Python a programming language?"
    - "What time is it?"

specializations:
  # Areas where this model performs particularly well
  strong_areas:
    - "General programming concepts"
    - "Creative writing"
    - "Educational explanations"
    - "Problem decomposition"
    - "Content structuring"
  
  # Areas where performance may be limited
  weak_areas:
    - "Highly specialized technical domains"
    - "Advanced mathematical proofs"
    - "Real-time data analysis"
    - "Complex multi-document synthesis"

prompt_templates:
  # Pre-defined templates for common use cases
  explanation:
    template: |
      Explain {topic} in a clear and structured way.
      Include:
      1. A brief definition
      2. Key concepts or components
      3. A practical example
      4. Common use cases or applications
      
      Keep the explanation accessible but informative.
    
  problem_solving:
    template: |
      Help me solve this problem: {problem}
      
      Please:
      1. Break down the problem into smaller parts
      2. Suggest a step-by-step approach
      3. Identify potential challenges
      4. Recommend tools or resources if applicable
    
  code_review:
    template: |
      Review this code and provide feedback:
      
      ```{language}
      {code}
      ```
      
      Please comment on:
      - Code quality and readability
      - Potential improvements
      - Best practices
      - Any bugs or issues

